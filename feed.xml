<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-12-30T13:47:48-06:00</updated><id>/feed.xml</id><title type="html">Tech Talk</title><subtitle>Welcome to Ajay Gupta's random musings about technology, books and photography.</subtitle><author><name>Ajay Gupta</name></author><entry><title type="html">Enterprise Integration Pattern, Async Messaging</title><link href="/messaging/2020/12/12/eip-messaging.html" rel="alternate" type="text/html" title="Enterprise Integration Pattern, Async Messaging" /><published>2020-12-12T10:47:34-06:00</published><updated>2020-12-12T10:47:34-06:00</updated><id>/messaging/2020/12/12/eip-messaging</id><content type="html" xml:base="/messaging/2020/12/12/eip-messaging.html">&lt;p&gt;Applications cannot exist in isolation. For instance, a typical accounting application manages its content using document management service, receives data streams from e-commerce application, and sends  notifications to registered user. To integrate these services you can use one of these common patterns; shared databases, exchanging files, making remote calls, or messaging.&lt;/p&gt;

&lt;p&gt;With shared database pattern all application functions have full access to the database and a function can read or change data written by another function to perform the integration task. This is an easy pattern to start with  but as the application complexity increases the rate at which the application can evolve degrades over the long term. Application can become a melting pot of logic and data. Increasing complexity and chances of regressions.&lt;/p&gt;

&lt;p&gt;Exchanging data file pattern is used by applications that move large amounts of data periodically. For instance, your application downloads transactions nightly from your banks and adds each transaction  to the ledger, or, your application logs are sent periodically to an application (like Splunk) that makes log analysis easier. This pattern is not synchronous making it unusable for many applications, and the circle of such application is growing because of fast changing user expectations.&lt;/p&gt;

&lt;p&gt;Making remote calls is a widely adopted pattern. Establishing a point to point communication is quick to get off the ground and does not require a special tools. The simplest example is a REST service called by an HTTP client to perform a function. When you visit a  site looking for movies playing near you, most likely a remote call-based system is fulfilling that request. Some of the largest commercial applications on the internet use this integration pattern. But it not without some drawbacks; lends to a tightly coupled system because the underlying service can evolve  but the contracts may be locked. Newer services in the application need to speak the language of legacy services. Increased application complexity if guaranteed processing of all incoming requests is a requirement.&lt;/p&gt;

&lt;p&gt;Async messaging based integration is the most reliable of the three patterns. Integrating applications send messages to each other which are processed asynchronously. Messaging technology has evolved to support both a large number of messages and provide sub-second response times rivaling direct calls.&lt;/p&gt;

&lt;p&gt;With making remote calls as the guide lets examine how async messaging patterns meets these expectations. Async messaging system supports two patterns for passing messages between services.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Point-to-point messaging&lt;/em&gt;: A point-to-point channel is established between message publisher and a subscriber capable of processing the message. To establish a point-to-point channel create a queue with two endpoints, one each for publishing and subscribing messages. Messages are processed in the order they arrive.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Publish/subscribe&lt;/em&gt;: When multiple parties are interested in the same message, messages are published to a topic and every subscriber receives a copy of the message. For instance, many applications may be interested in the price of a stock listed on an exchange.&lt;/p&gt;

&lt;p&gt;To scale message processing add multiple subscribers. Messages are delivered in a round-robin to the group of subscribers also known as competing consumers. Message order is lost in this setup.&lt;/p&gt;

&lt;p&gt;Messaging systems provide additional capabilities that help scale integrations and simplify&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Message filters&lt;/em&gt;: Point to point channel architecture can cause an operational challenge causing an explosion of channels. For instance, anytime a new type of message arrives new channels need to be established. Message filters can alleviate this pain. Subscribers sit behind a filter which only allows messages that subscriber is interested in. New message types would not impact existing subscribers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Message router&lt;/em&gt;: Managing message filters spread across the network can be challenging, especially when you are making a change that affects multiple filters, a message router can help centralize this logic. All filtering logic lives in the message router, the router has a channel for inbound messages and multiple outbound channels. A subscriber would connect with the outbound channels.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Canonical models and transformers&lt;/em&gt;: Message filters and router simplify point to point channels, but the message format expected by each service in the system can present another challenge. A canonical data model adds a level of indirection between service formats. Messages inside the pipeline flow in a standard model and consuming services covert message to the format they understand. 
A message transformer (also know as adapters) transforms messages from the canonical data model to a service-specific format, like a spoken language interpreter. The canonical model of the application can evolve without affecting connecting services. This is especially helpful when connecting legacy service into a messaging channel&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;message broker&lt;/em&gt; is an architectural pattern that can bring all these capabilities together. A broker mediates communication between services. It can be the central component that receives all messages, transforms them as necessary, and hands them over to a message router to deliver them to the right channel. 
A single instance of the broker operates in a hub and spoke model. All inbound messages arriving at the hub and distributed out to the subscribers. This model has a single point of failure and can be inefficient if the publisher and subscribers are geographically distributed. In such cases, multiple brokers may be to configured, ideally one for each cluster of co-located subscribers. Subscribers depending on their needs can connect to the closest broker and un-processed messages travel from broker to broker.&lt;/p&gt;

&lt;p&gt;Top benefits from using async integration pattern&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;no tight coupling between services&lt;/li&gt;
  &lt;li&gt;Guaranteed delivery of message is easier to implement.&lt;/li&gt;
  &lt;li&gt;Easy to scale services&lt;/li&gt;
  &lt;li&gt;Location independence for service, service clients need not hard code service URL&lt;/li&gt;
  &lt;li&gt;Simpler gateway configuration with no point to point connections between services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Kafka&lt;/em&gt; is a distributed message broker that supports a publish/subscribe integration pattern. Kafka provides scale and reliability by operating on a cluster of machines. Producers and consumers are the basic types of users of the system. Producers write messages to topics that are divided into multiple partitions and the partitions are distributed across the cluster. Multiple copies of the same partitions are kept to improve the reliability of the system. This system of partitions also provides a scale where Kafka can be used as a stream processor like Samza and Apache storm.&lt;/p&gt;

&lt;p&gt;Kafka cluster can be configured for high consistency or high availability. High consistency is achieved by making sure  writes are successfully replicated across multiple partitions. Availability can be increased by increasing the number of partitions, even if one machine goes down consumer will be redirected to other partitions. Apache zookeeper manages information about the partitions and the role they play in the cluster.&lt;/p&gt;

&lt;p&gt;Reference:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.redelastic.com/a-journey-into-reactive-streams-5ee2a9cd7e29#.2wqcc3cja&quot;&gt;Reactive streams&lt;/a&gt;
&lt;a href=&quot;https://activemq.apache.org/how-do-distributed-queues-work.html&quot;&gt;ActiveMQ Topologies&lt;/a&gt;&lt;/p&gt;</content><author><name>Ajay Gupta</name></author><category term="messaging" /><summary type="html">Applications cannot exist in isolation. For instance, a typical accounting application manages its content using document management service, receives data streams from e-commerce application, and sends notifications to registered user. To integrate these services you can use one of these common patterns; shared databases, exchanging files, making remote calls, or messaging.</summary></entry><entry><title type="html">Affiliate Marketing</title><link href="/marketing/2020/12/01/affiliatemarketing.html" rel="alternate" type="text/html" title="Affiliate Marketing" /><published>2020-12-01T10:47:34-06:00</published><updated>2020-12-01T10:47:34-06:00</updated><id>/marketing/2020/12/01/affiliatemarketing</id><content type="html" xml:base="/marketing/2020/12/01/affiliatemarketing.html">&lt;p&gt;Affiliate marketing industry  is 20+ years old and peaked at a revenue of 5 Billion in 2016. It started after a conversation between a person with a blog and the CEO of Amazon. After the conversation, Jeff Bezos thought of an idea where Amazon would share revenue with publishers driving legitimate traffic toward Amazon and receive a part of the revenue in return. Some credit also goes to William Tobin, for the PC Flower Inc business he launched on Prodigy net, his company supported the tenants of affiliate marketing.&lt;/p&gt;

&lt;p&gt;Google indexes 50 billion pages and an average adult in the united states spends 5 hours online daily. Consumers are scattered all over the web in small communities, and as time spent online has surpassed TV watching. e-commerce merchants needed a meaningful way to have conversations with consumers wherever they choose to spend their time. It is prohibitively expensive to reach each publisher and ask them to add a link back to your site. It is equally inefficient for publishers to spend time finding the best ads for their consumers amongst the various commerce sites. Affiliate marketing networks fill this void, they bring the content publishers &amp;amp; merchants together. The publisher can register their sites and receive a small piece of HTML that forms the portal for receiving relevant ads. Merchants can register the products they want to promote and the revenue they are willing to share. All tracking &amp;amp; accounting is done by the affiliate network for smooth flow of commerce.
The top 3 marketplaces are Commission Junction, Linkshare, and Google affiliate network.  Google is in the process of shutting down this business in favor of its search-based advertising.&lt;/p&gt;

&lt;p&gt;Some e-commerce sites that a large amount of traffic go at it alone and manage an affiliate network themselves and take on the responsibility themselves Probably resulting in cost savings and higher revenue for the publishers. Ebay, Amazon are a few merchants that manage affiliates directly.&lt;/p&gt;

&lt;p&gt;There are downsides to using an affiliate network, many small advertisers have found the hard way that traffic coming from many of these affiliate sites is theirs to being with, the most common case is where the user search for a coupon just before completing a purchase, fraudulent publishing sites advertise coupons for advertisers even though none exists, and in the search for coupons users end up on these sides which drop a cookie in consumers browser. Now if the consumer completes the transaction the referral credit will go to the affiliate publisher. Advertisers need to be careful and pay attention to where the traffic is coming from.&lt;/p&gt;

&lt;p&gt;In 2013 eBay sent FBI agents to 2 of its biggest affiliates claiming 20 million of revenue generated by these affiliates was fraudulent. These affiliates used a technique called ‘cookie stuffing’ These fraudsters gave away a browser widget that helped bloggers understand incoming traffic to their site. Every time the widget was invoked it clandestinely add an eBay cookie to the user’s browser, and if the use made any purchase on eBay the credit would go to the publisher of the widgets. By the widget was removed it had spread to more than 650,000 computers.&lt;/p&gt;</content><author><name>Ajay Gupta</name></author><category term="marketing" /><summary type="html">Affiliate marketing industry is 20+ years old and peaked at a revenue of 5 Billion in 2016. It started after a conversation between a person with a blog and the CEO of Amazon. After the conversation, Jeff Bezos thought of an idea where Amazon would share revenue with publishers driving legitimate traffic toward Amazon and receive a part of the revenue in return. Some credit also goes to William Tobin, for the PC Flower Inc business he launched on Prodigy net, his company supported the tenants of affiliate marketing.</summary></entry><entry><title type="html">Breaking a monolith</title><link href="/monolith/2020/03/01/breaking-monoliths.html" rel="alternate" type="text/html" title="Breaking a monolith" /><published>2020-03-01T10:47:34-06:00</published><updated>2020-03-01T10:47:34-06:00</updated><id>/monolith/2020/03/01/breaking-monoliths</id><content type="html" xml:base="/monolith/2020/03/01/breaking-monoliths.html">&lt;p&gt;QuickBooks launched in 1993 as a desktop solution for DIY accounting, it was an immediate success and within a few years business started doubling revenue year over year. Application users quickly realized an inefficiency, users were forced to enter the data twice; first in the e-commerce site and after the invoice was paid it had to be entered again into the Accounting system. This is inefficient and error prone.&lt;/p&gt;

&lt;p&gt;Enterprising third party developers realized this opportunity and stared demanding an open ecosystem to enable integration between e-commerce sites and QuickBooks. A barebones developer portal was launched to guide developers on how to build integrations. Overtime, the portal evolved as Inuit started launching APIs for integrations As the developer base grew several experiments were launched to monetize or improve billing. Each improvement  bloated the Codebase for the developer portal. Resulting in a application that was expensive to maintain and add new features too. Users confirmed this inefficiency through an NPS score of -17.&lt;/p&gt;

&lt;p&gt;An effort was launched to break the monolith and move the application to AWS and the team also decided to upgrade the stack to React, Java and Aurora.  After a year of effort by a small scrum team of 6 engineers working with a PM and design partner launched the portal. With this new version code size reduced by 50%, the cycle time for a change went down from weeks to minutes. The team started responding to user voice on same day. This resulted in a developer NPS of +38 within 6 months of launching the site. Following are learning from this journey.&lt;/p&gt;

&lt;h3 id=&quot;strong-team&quot;&gt;Strong team&lt;/h3&gt;

&lt;p&gt;A team that works well together is critical to the success of any project, with this  rest of the pieces  fall into place seamlessly. A good team has diverse members, they trusts each other, are passionate about their craft and  hungry to learn.&lt;/p&gt;

&lt;p&gt;As a team leader you are responsible for&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Building a team of owners. to produce a good product you need support from product managers, designers, support engineers and only a team acting as owners can bring this group together effectively.&lt;/li&gt;
  &lt;li&gt;Communicate clear goals and have a plan ready for the end game. Repeat your goals frequently&lt;/li&gt;
  &lt;li&gt;Create space for learning by failing.&lt;/li&gt;
  &lt;li&gt;Be fair, everyone has the responsibility of taking on not to interesting parts of work.&lt;/li&gt;
  &lt;li&gt;Lead by example&lt;/li&gt;
  &lt;li&gt;drive for impact&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deliver-frequently&quot;&gt;Deliver Frequently&lt;/h3&gt;

&lt;p&gt;Delivering frequently is the difference between teams that succeed in completing domain changing projects  and the teams that fail. Showing running code is more powerful than a promise to deliver something in near future.  Overtime executive support for long running project erodes but continuous deliver keeps that confidence high. Continuous delivery helps the team by giving them opportunities to experiment with new ideas at low cost, maintain a narrow focus, and learn from and react quickly to customer feedback.&lt;/p&gt;

&lt;p&gt;You should&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Build the CI &amp;amp; CD pipeline before writing any meaningful code&lt;/li&gt;
  &lt;li&gt;Capture customer feedback at point of use&lt;/li&gt;
  &lt;li&gt;Plan to build a complete feature set that would be useful to a segment of users. It will help limit any jarring experience navigating between old and new stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;expect-surprises&quot;&gt;Expect Surprises&lt;/h3&gt;

&lt;p&gt;Domain changing rewrites will deliver plenty of surprises that have the potential of derailing the effort. Surprises can come from anywhere; from the code as previously unknown capabilities, or data that reflects state resulting from buggy code in production, or long time users of the product. These surprises can come at any stage of the lifecycle. To mitigate; release early and often, put built product in front of any many stakeholders as possible and have a way to quickly correct and move forward.&lt;/p&gt;

&lt;p&gt;You should&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;have a mindset of fixing forward, a long pause after rollback can erode confidence&lt;/li&gt;
  &lt;li&gt;Have a pipeline to test &amp;amp; deliver changes quickly&lt;/li&gt;
  &lt;li&gt;do frequent launches&lt;/li&gt;
  &lt;li&gt;build dashboards that alert you on anomalies, and a process of review and correct them immediately&lt;/li&gt;
  &lt;li&gt;challenge all surprise discoveries and look for ways to end support for corner cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;choosing-your-stack&quot;&gt;Choosing your stack&lt;/h3&gt;

&lt;p&gt;Choosing a tech stack for your application  is one of the hardest decisions you will make and will continue to question it even after the application is in production. Some factors that will influence your decision are cost, skills of the team, type of the application you are developing (commerce, learning portal or marketplace), security (will you accept payments), control over data, non functional requirements (availability, scale, response times). Just think you are building something for the next ten years. No matter which stack you choose do should,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;deploy everything to the cloud&lt;/li&gt;
  &lt;li&gt;Containerize and automate 100% of deployment steps to easily add new environments, stay up to date on security and scale the application&lt;/li&gt;
  &lt;li&gt;implement domain capabilities as microservices; they are easier to build and manage and worth the the added cost of orchestration and data ownership.&lt;/li&gt;
  &lt;li&gt;build reusable UI widgets to bring consistency beyond the current application.&lt;/li&gt;
  &lt;li&gt;depend on cloud managed capabilities (messaging, database, file store, cache) to reduce the burden of operations and tuning&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;be-creative&quot;&gt;Be creative&lt;/h3&gt;

&lt;p&gt;You will run into new challenges everyday, be creative and experiment.&lt;/p&gt;

&lt;p&gt;Long tail of task is tedious and unpredictable, during this phase consider switching to &lt;a href=&quot;https://en.wikipedia.org/wiki/Kanban&quot;&gt;Kanban&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep moving. As you build things for the future you will constantly run into dependent teams that are trying to do the same. Waiting for all of them to get a perfect solution will never happen. Make choices based on the goals you have set. Your architecture should give you an opnityportu to come back and refactor seamlessly.&lt;/p&gt;

&lt;p&gt;MIndset: As you rebuild the application from the ground up the behavior of the team and the stakeholders needs to change.  Stakeholders should allow the team to challenge what works today and team members need to strive for doing things the right way even if it takes a long time.  Well build components last longer and lead to reuse which saves times elsewhere,&lt;/p&gt;</content><author><name>Ajay Gupta</name></author><category term="monolith" /><summary type="html">QuickBooks launched in 1993 as a desktop solution for DIY accounting, it was an immediate success and within a few years business started doubling revenue year over year. Application users quickly realized an inefficiency, users were forced to enter the data twice; first in the e-commerce site and after the invoice was paid it had to be entered again into the Accounting system. This is inefficient and error prone.</summary></entry><entry><title type="html">NoSQL</title><link href="/nosql/2019/01/01/nosql.html" rel="alternate" type="text/html" title="NoSQL" /><published>2019-01-01T10:47:34-06:00</published><updated>2019-01-01T10:47:34-06:00</updated><id>/nosql/2019/01/01/nosql</id><content type="html" xml:base="/nosql/2019/01/01/nosql.html">&lt;p&gt;Financial service providers are expected to available hundred percent of the time and expected to deliver up to date information. Expectations from a site like Ticketmaster are different, during peak hours site can make its users wait but when serving the information needs to be up to date. Social media sites are expected to be highly available but old data in the feed is tolerated.&lt;/p&gt;

&lt;p&gt;Relational databases like Oracle, MySQL, or Postgres can meet  expectations of consistency, availability and internal system failure tolerance by implementing  ACID principles.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Atomicity enables combining of multiple tasks which together complete an action into a single unit called transaction. Booking a seat also requires that a credit card be charged successfully.&lt;/li&gt;
  &lt;li&gt;Consistency principle  ensures all tasks in a transaction are completed successfully. If one task from a set of tasks for a transaction fails, all successful changes are reverted and remaining abandoned. While this transaction is running no one else can make a contradicting change like double booking a seat.&lt;/li&gt;
  &lt;li&gt;While this seat is being booked the Isolation principle  ensures other visitors on the site see this seat as unavailable.&lt;/li&gt;
  &lt;li&gt;The Durability principle will ensure completed transactions will be recorded even in the event of an external failure like network connectivity within the database subsystem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consistency provided by an ACID databases comes at high cost and slow performance. The costs can get prohibitively large when the scale increases significantly. Facebook has close to 2 billion users.  NoSQL databases that tradeoff between consistency, Availability and failure tolerance can meet the needs at fraction of the cost.&lt;/p&gt;

&lt;p&gt;NoSQL databases provide a simple, scalable, highly responsive, low cost and flexible option. Some of the biggest social network have invented and depend on NoSQL databases for their critical use cases.  NoSQL databases are built on distributed computing principles in which a  cluster of nodes act as one unit with data distributed across multiple nodes for scale. This adds the requirement of Partition tolerance to Consistency and Availability.  Collectively know as the CAP theorem introduced by Eric Brewer&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consistency: What you write is available for reading to all clients&lt;/li&gt;
  &lt;li&gt;Availability: All clients are able to read and write data continuously&lt;/li&gt;
  &lt;li&gt;Partition tolerance: Cluster can handle partial failures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider two nodes on different ends of a partition. Writes to one will cause other node to become inconsistent. To maintain consistency you need to take one node down, loosing Availability. Only when the nodes are communicating you can preserve both consistency and availability but you forfeit Partition tolerance.  According to CAP theorem it is impossible to have all three traits simultaneously, databases have to pick 2 out of the 3 traits. ACID databases support Consistency and Availability and NoSQL databases are based on Consistency &amp;amp; Partition Tolerance (CP) or Availability &amp;amp; Partition Tolerance (AP).&lt;/p&gt;

&lt;p&gt;CP NoSQL databases maintain consistency of the data. MongoDB is a popular CP database that has a primary node for writing, and data is made available on other nodes for reading. If the primary node fails, the cluster makes the secondary node with most up to date data as the primary node. The cluster remains unavailable for writes during this transfer to maintain consistency of writes. Availability is forfeited for consistency.&lt;/p&gt;

&lt;p&gt;AP NoSQL stores accepts read and writes on multiple nodes and becomes eventually consistent by replication of changes across the cluster. Cassandra is an AP database. If a node goes down, clients continue to read data from a replicated node which may not have the most up to date data. Consistency is forfeited for Availability.&lt;/p&gt;

&lt;p&gt;Choose NoSQL if you:  &lt;br /&gt;
Want to start fast,
need a flexible data model,
Scale at low cost,
Want low latency, and,&lt;br /&gt;
Can tradeoff between consistency and availability&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&lt;/li&gt;
  &lt;li&gt;https://www.ibm.com/cloud/learn/cap-theorem&lt;/li&gt;
  &lt;li&gt;https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed/&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ajay Gupta</name></author><category term="nosql" /><summary type="html">Financial service providers are expected to available hundred percent of the time and expected to deliver up to date information. Expectations from a site like Ticketmaster are different, during peak hours site can make its users wait but when serving the information needs to be up to date. Social media sites are expected to be highly available but old data in the feed is tolerated.</summary></entry></feed>